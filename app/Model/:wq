<?php
App::uses('AppModel', 'Model');
App::uses('Card', 'Model');
App::uses('UserCard', 'Model');
App::uses('Item', 'Model');
App::uses('UserItem', 'Model');
App::uses('UserParam', 'Model');

/**
 * User Model
 *
 * @property SnsUser $SnsUser
 */
class User extends AppModel {

/**
 * Primary key field
 *
 * @var string
 */
	public $primaryKey = 'user_id';

/**
 * Validation rules
 *
 * @var array
 */
	public $validate = array(
		'user_name' => array(
			'notEmpty' => array(
				'rule' => array('notEmpty'),
				//'message' => 'Your custom message here',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
		'sns_user_id' => array(
			'notEmpty' => array(
				'rule' => array('notEmpty'),
				//'message' => 'Your custom message here',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
		'carrer' => array(
			'numeric' => array(
				'rule' => array('numeric'),
				//'message' => 'Your custom message here',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
		'delete_flg' => array(
			'numeric' => array(
				'rule' => array('numeric'),
				//'message' => 'Your custom message here',
				//'allowEmpty' => false,
				//'required' => false,
				//'last' => false, // Stop validation after this rule
				//'on' => 'create', // Limit validation to 'create' or 'update' operations
			),
		),
	);

	//The Associations below have been created with all possible keys, those that are not needed can be removed

/**
 * belongsTo associations
 *
 * @var array
 */
	public $belongsTo = array(
		'SnsUser' => array(
			'className' => 'SnsUser',
			'foreignKey' => 'sns_user_id',
			'conditions' => '',
			'fields' => '',
			'order' => ''
		)
	);


    /**
     * 取得したアイテム等を登録するメソッド確認
     *
     * @author imanishi
     * @param int 1:カード 2:アイテム 3:お金
     * @return bool
     */
    public function registGetData($userId, $kind, $targetId, $num) { 
    
        switch ($kind) 
        {
            // カード
            case 1:
                $card = new Card();
                $userCard = new UserCard();

                $data = array();
                $where = array('card_id' => $targetId);
                $fields = array('card_atk' , 'card_def');
                $row = $card->getAllFind($where, $fields, 'first');
                die;
                for ($i = 0; $i < $num; $i++) {
                    $data[] = array($userId, $targetId, $row['card_atk'], $row['card_def']);
                }
                $fields = array('user_id', 'card_id', 'atk', 'def');
                $ret = $userCard->insertBulk($fields, $data);

                break;

            // アイテム
            case 2:
                $item = new Item();
                $userItem = new UserItem();

                break;

            // お金
            case 3:
                $userParam = new UserParam();

                break;
            default:
               return false;
        }
        return $ret; 
    } 
}
